{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","tester","setData","useEffect","fetch","then","resp","json","parsert","array","map","d","match","Date","temp1","DATE_DUE","temp2","DATE_SUBMITTED","k","e","Math","floor","getTime","i","DAYS_DUE","PRIORITY","console","log","color_gen","scalar","status_gen","round","columns","title","field","tooltip","emptyValue","align","cellStyle","width","maxWidth","headerStyle","render","rowData","className","style","background","color","searchable","export","padding","LinearProgress","variant","value","data","options","filtering","exportButton","backgroundColor","borderBottom","actions","icon","onClick","newData","row","tableData","workSheet","XLSX","utils","json_to_sheet","workBook","book_new","book_append_sheet","write","bookType","type","writeFile","downloadExcel","isFreeAction","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.728b2d4b.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport MaterialTable from 'material-table';\nimport {LinearProgress} from '@material-ui/core'\nimport XLSX from 'xlsx'\n\n\n\nfunction App() {\n\n  const [tester,setData]=useState([]);\n\n  useEffect(() => {\n    fetch(\"data.json\")\n      .then(resp => resp.json())\n      .then(resp => {\n        setData(resp)\n      })\n  }, [])\n\n\n    const downloadExcel=()=>{\n      const newData=tester.map(row=>{\n        delete row.tableData\n        return row\n      })\n      const workSheet=XLSX.utils.json_to_sheet(newData)\n      const workBook=XLSX.utils.book_new()\n      XLSX.utils.book_append_sheet(workBook,workSheet,\"Workflows\")\n      //Buffer\n      let buf=XLSX.write(workBook,{bookType:\"xlsx\",type:\"buffer\"})\n      //Binary string\n      XLSX.write(workBook,{bookType:\"xlsx\",type:\"binary\"})\n      //Download\n      XLSX.writeFile(workBook,\"WorkflowData.xlsx\")\n\n\n    }\n\n\n\nlet parsert = function (array){\nvar data = array.map(d=>d.match(/(\\d{2})\\-(\\d{2})\\-(\\d{4})/));\nvar date = data.map(d=>new Date(d[3], d[2] - 1, d[1]));\nreturn date;\n}\n\nlet temp1 = parsert(tester.map(d=>d.DATE_DUE));\nlet temp2 = parsert(tester.map(d=>d.DATE_SUBMITTED));\n\nlet k = parsert(tester.map(d=>d.DATE_DUE)).map((e=>Math.floor((e.getTime() - (new Date).getTime())/(1000*60*60*24))));\n\nfor (var i in tester) \n  {\n    tester[i].DAYS_DUE = k[i];\n   tester[i].PRIORITY =  (temp2[i].getTime()-(new Date).getTime())/(temp2[i].getTime() -  temp1[i].getTime());\n\n  }\n\nconsole.log(tester);\n\n\n  \n\n  \n  const [WF_Type,setWF_Type]=useState('all')\n\n\nfunction color_gen(scalar){\nlet color = scalar <= 75 ? \"primary\": \nscalar > 75 && scalar <= 100 ? \"secondary\": \"secondary\"\nreturn color                                        \n}\n\nfunction status_gen(scalar){\nlet bar = scalar > 0 ?\"determinate\":\"indeterminate\"\nlet text = scalar < 0  ?\"Overdue\":`${Math.round(scalar*100)}%`\nreturn [bar, text]                                        \n}\n\n\n\n\n  const columns = [\n        {\n      title: \"Due in\", field: \"DAYS_DUE\", tooltip:\"Number of days remaining\", emptyValue: () => <em>null</em>, align: \"center\", cellStyle: {\n       width: 110,\n       maxWidth: 110\n     },\n     headerStyle: {\n       width:110,\n       maxWidth: 110 },\n      render: (rowData) => \n      <div className= \"daysdue\" style={{ background: \n                                        rowData.DAYS_DUE > 0 && rowData.DAYS_DUE <= 10 ? \"#FF9194\": \n                                        rowData.DAYS_DUE >= 11 && rowData.DAYS_DUE <= 25 ? \"#FFCCBB\":\n                                        rowData.DAYS_DUE > 25 && rowData.DAYS_DUE < 60 ? \"lemonchiffon\": \n                                        rowData.DAYS_DUE > 60 ? \"rgb(207,254,212)\":\"crimson\",\n                                        color: \n                                        rowData.DAYS_DUE > 0 && rowData.DAYS_DUE <= 10 ? \"#890E16\": \n                                        rowData.DAYS_DUE >= 11 && rowData.DAYS_DUE <= 25 ? \"darkred\":\n                                        rowData.DAYS_DUE > 25 && rowData.DAYS_DUE <= 60 ? \"#4F4E00\": \n                                        rowData.DAYS_DUE > 60 ? \"0D281F\":\"white\",\n                                     }}>\n {rowData.DAYS_DUE}</div>,\n       searchable: true, export: false\n    },\n\n     {title: \"Priority\", field: \"PRIORITY\", align: \"center\",tooltip:\"Percentage of time elapsed\", cellStyle: {\n       width: 100,\n       maxWidth: 100\n     },\n     headerStyle: {\n       width:100,\n       maxWidth: 100 },\n   render: (rowData) => \n\n<div style={{color: color_gen(rowData.PRIORITY)}}>\n<div className=\"percent_caption\" style={{padding:5}}>{status_gen(rowData.PRIORITY)[1]}</div>\n<LinearProgress variant={status_gen(rowData.PRIORITY*100)[0]} value={rowData.PRIORITY*100} color={color_gen(rowData.PRIORITY*100)}/>\n</div>\n \n  },\n      { title: \"Workflow ID\", field: \"WORKFLOW_ID\", align: \"center\",  cellStyle: {\n       width: 150,\n       maxWidth: 150\n     },\n     headerStyle: {\n       width:150,\n       maxWidth: 150 }},\n     {title: \"Model ID\", field: \"MODEL_ID\",align: \"center\", cellStyle: {\n       width: 120,\n       maxWidth: 120\n     },\n     headerStyle: {\n       width:120,\n       maxWidth: 120\n     } },\n    { title: \"Model Name\", field: \"MODEL_NAME\",cellStyle: {\n       width: 300,\n       maxWidth: 500\n     },\n     headerStyle: {\n       width:300,\n       maxWidth: 500\n     }\n    },\n     { title: \"Submitted\", field: \"DATE_SUBMITTED\" },\n    { title: \"Date Due\", field: \"DATE_DUE\" },\n    { title: \"Lead\", field: \"LEAD\" },\n    { title: \"Reviewer\", field: \"REVIEWER\" },\n   \n\n  ]\n\n\n  return (\n\n\n    <div className=\"App\">\n\n\n\n\n<div className=\"table\">\n\n      <MaterialTable\n        title=\"Ongoing Submissions Tracker\"\n        data={tester}\n        columns={columns}\n\n        options={{filtering:true, exportButton: true,\n\n        headerStyle: {\n          backgroundColor: '#fff',\n          color: 'rgb(3,4,94)',\n          borderBottom: '1.5px dashed rgba(224, 224, 224, 1)'\n\n\n        }\n\n\n        }}\n      actions={[\n          {icon:()=><button className=\"btn btn-border-2\">Excel</button>,\n          tooltip:\"Export to Excel\",\n        onClick:()=>downloadExcel(),\n      isFreeAction:true}\n        ]}\n\n\n                \n      />\n    </div>\n\n</div>\n\n\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}